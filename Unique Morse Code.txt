International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: "a" maps to ".-", "b" maps to "-...", "c" maps to "-.-.", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:

[".-","-...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."]

Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, "cba" can be written as "-.-..--...", (which is the concatenation "-.-." + "-..." + ".-"). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.

Example:
Input: words = ["gin", "zen", "gig", "msg"]
Output: 2
Explanation: 
The transformation of each word is:
"gin" -> "--...-."
"zen" -> "--...-."
"gig" -> "--...--."
"msg" -> "--...--."

There are 2 different transformations, "--...-." and "--...--.".

Note:

    The length of words will be at most 100.
    Each words[i] will have length in range [1, 12].
    words[i] will only consist of lowercase letters.

//////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
   
    
    int uniqueMorseRepresentations(vector<string>& words) 
    {
         //Vector containing all mores code - codes
        vector<string> morse {".-","-...","-.-.","-..",".","..-.","--.",

                        "....","..",".---","-.-",".-..","--","-.","---",".--.",

                        "--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."};

        map<char, string> characterConverter; //Aux map to alphanumeric to morse
        
        for(int i = 0; i < morse.size(); i++ )
        {
            characterConverter[(char)((int)'a'+ i)] = morse[i];  // Create morse code dictionary
        }
        
        map<string, int> uniqueWordsMap;
        string tempMorseWord = "";
        int uniqueWordsNumber = 0;
        
        for(int i = 0; i < words.size(); i++)  // Loop to transform words to morse code
        {
            for(int j = 0; j < words[i].length(); j++)
            {
               tempMorseWord += characterConverter[words[i][j]];  //create word from morse code using dictionary
            }          
            
            cout<< tempMorseWord << endl;
            
            if(uniqueWordsMap.count(tempMorseWord))  //Check if we have at least one instance of this word
            {
                tempMorseWord = "";                 //Repeated instance of word then reset word
            }
            else
            {
                uniqueWordsMap[tempMorseWord] = 1;  //No repeated instance of word then add word, reset, add 1 to counter
                tempMorseWord = "";
                uniqueWordsNumber++;
            }
        }
               
        return uniqueWordsNumber;
        
    }
};