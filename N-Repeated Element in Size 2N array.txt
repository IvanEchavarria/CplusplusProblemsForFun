In a array A of size 2N, there are N+1 unique elements, and exactly one of these elements is repeated N times.

Return the element repeated N times.

 

Example 1:

Input: [1,2,3,3]
Output: 3

Example 2:

Input: [2,1,2,5,3,2]
Output: 2

Example 3:

Input: [5,1,5,2,5,3,5,4]
Output: 5

 

Note:

    4 <= A.length <= 10000
    0 <= A[i] < 10000
    A.length is even

///////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int repeatedNTimes(vector<int>& A) 
    {
        
        if(A.size() <= 0)  // Array is empty return
        {
            return -1;
        }

        map<int, int> hashTable;            //Map to track repeated keys

        for(int i = 0; i < A.size() ; i++)
        {
            if(hashTable.count(A[i]))       //if this key has been seen in the map then we are done
            {
                return A[i];
            }
            else
            {
                hashTable[A[i]] = A[i];     //if key has not been mapped then add it
            }
        }        
        
         return -1;
        
    }
};