Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.

You may return any answer array that satisfies this condition.

 

Example 1:

Input: [3,1,2,4]
Output: [2,4,3,1]
The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.

 

Note:

    1 <= A.length <= 5000
    0 <= A[i] <= 5000

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////


class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& A) {
        
        int vectorSize = A.size();     
        
        vector<int> result(vectorSize); //Create vector of size input
        
        int low = 0;
        int high = vectorSize - 1; 
            
        
        if(vectorSize <= 0) // List is empty
        {
            return result;
        }        
       
        
        for(int i = 0; i <= vectorSize/2; i++) // We will take front and end at the same time so only go half iterations
        {
            if(vectorSize % 2 == 0)           //The number of elements in the list is even
            {
                if(i != vectorSize/2)
                {
                    if(A[i] % 2 == 0)
                    {
                        //Take front element and put it in the front if even
                        //result.insert(result.begin(), A[i]); -> this realocates the vector everytime so is not good
                        
                        result[low] = A[i]; //Drop number in position and move towards the middle
                        low++;
                    }
                    else
                    {    //Take front element and put it in the end if odd
                       // result.push_back(A[i]); dont want to push in the back I want to move towards the middle
                        
                        result[high] = A[i]; //Drop number at the end and then move inwards towards the middle 
                        high--;
                    }

                    if(A[ vectorSize - i - 1] % 2 == 0)
                    {
                        //Take last element and put in the front if even                      
                        result[low] = A[vectorSize - i - 1];
                        low++;
                    }
                    else
                    {                      
                        result[high] = A[vectorSize - i - 1];
                        high--;
                    }
                }
            }
            else                            //Number of elements in the list is odd    
            {
                if(i != vectorSize/2)
                {
                    if(A[i] % 2 == 0)
                    {
                        result[low] = A[i];
                        low++;
                    }
                    else
                    {                   
                        result[high] = A[i];
                        high--;
                    }

                    if(A[ vectorSize - i - 1] % 2 == 0)
                    {
                        result[low] = A[vectorSize - i - 1];
                        low++;
                    }
                    else
                    {
                        result[high] = A[vectorSize - i - 1];
                        high--;
                    }
                }
                 else // Extra case for middle element we just take of of them
                {
                    if(A[i] % 2 == 0)
                    {
                        result[low] = A[i];
                    }
                    else
                    {
                        result[high] = A[i];
                    }
                }
            }           
            
        }
        
        return result;
        
    }
};